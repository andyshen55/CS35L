Name: Thant Zin Oo
UID: 705172144

Lab 7 Report
--------------------------------------------------------------------------------

1. To get a copy of the diffutils repository, I used the command:
   git clone ~eggert/src/gnu/diffutils

2. I redirected the output of git log to git-log.txt using the command:
   cd diffutils
   git log > git-log.txt

3. I redirected the output of git tag to git-tags.txt using the command:
   git tag > git-tags.txt

4. To generate a patch from a git commit, I found the command git format-patch.
To find the hash number of the specified patch, I used grep to match maint:
   cat git-log.txt | fgrep 'maint: quote' -A 4 -B 4
   git format-patch -1 62ca21c8c1a5aa3488589dcb191a4ef04ae9ed4f --stdout > quote-patch.txt

Output:
commit 62ca21c8c1a5aa3488589dcb191a4ef04ae9ed4f
Author: Paul Eggert <eggert@cs.ucla.edu>
Date:   Wed Jan 25 23:46:16 2012 -0800

    maint: quote 'like this' or "like this", not `like this'

    This is in response to a recent change in the GNU coding standards,
    which now suggest quoting 'like this' or "like this", instead of
    `like this' or ``like this''.
    
5. To checkout version 3.0 from my local repository, I used the command:
   git checkout v3.0

6. I applied the patch by following the instructions in the spec.
   patch -p1 < quote-patch.txt

Errors:
patching file src/diff.c
Hunk #10 FAILED at 876.
Hunk #11 FAILED at 906.
Hunk #12 FAILED at 942.
3 out of 14 hunks FAILED -- saving rejects to file src/diff.c.rej

patching file src/diff3.c
Hunk #6 FAILED at 433.
1 out of 9 hunks FAILED -- saving rejects to file src/diff3.c.rej

patching file README
Hunk #1 FAILED at 9.
Hunk #3 FAILED at 60.
2 out of 3 hunks FAILED -- saving rejects to file README.rej

patching file README-hacking
Hunk #1 FAILED at 19.
1 out of 1 hunk FAILED -- saving rejects to file README-hacking.rej

patching file cfg.mk
Hunk #1 FAILED at 29.
1 out of 1 hunk FAILED -- saving rejects to file cfg.mk.rej

7. I used the git status command to get an overview of what happened.

Output:
HEAD detached at v3.0
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        modified:   NEWS
        modified:   README
        modified:   TODO
        modified:   doc/diagmeet.note
        modified:   ms/config.bat
        modified:   ms/config.site
        modified:   po/en.po
        modified:   src/analyze.c
        modified:   src/cmp.c
        modified:   src/context.c
        modified:   src/diff.c
        modified:   src/diff.h
        modified:   src/diff3.c
        modified:   src/dir.c
        modified:   src/ifdef.c
        modified:   src/io.c
        modified:   src/sdiff.c
        modified:   src/side.c
        modified:   src/system.h
        modified:   src/util.c
        modified:   tests/help-version

Untracked files:
  (use "git add <file>..." to include in what will be committed)

        NEWS.orig
        README-hacking.orig
        README-hacking.rej
        README.orig
        README.rej
        cfg.mk.orig
        cfg.mk.rej
        git-log.txt
        git-tags.txt
        ms/config.site.orig
        quote-patch.txt
        src/cmp.c.orig
        src/context.c.orig
        src/diff.c.orig
        src/diff.c.rej
        src/diff.h.orig
        src/diff3.c.orig
        src/diff3.c.rej
        src/dir.c.orig
        src/sdiff.c.orig
        src/system.h.orig
        src/util.c.orig
        tests/help-version.orig

no changes added to commit (use "git add" and/or "git commit -a")

8. To learn the emacs functions vc-diff and vc-revert, I read the documentation
linked to in the spec, as well as the emacs C-h k command. I then used the buffer
created by vc-diff to learn how to use the diff-apply-hunk and diff-goto-source
functions.

diff-apply-hunk: Apply this hunk to its target file
diff-goto-source: Go to source file corresponding to chosen hunk

9. To revert all changes to non .c files, I used vc-revert on every non .c file
and discarded changes. I ran git status again to see the modified files to revert.

    	modified:   NEWS
        modified:   README
        modified:   TODO
        modified:   doc/diagmeet.note
        modified:   ms/config.bat
        modified:   ms/config.site
        modified:   po/en.po
        modified:   src/analyze.c
        modified:   src/cmp.c
        modified:   src/context.c
        modified:   src/diff.c
        modified:   src/diff.h
        modified:   src/diff3.c
        modified:   src/dir.c
        modified:   src/ifdef.c
        modified:   src/io.c
        modified:   src/sdiff.c
        modified:   src/side.c
        modified:   src/system.h
        modified:   src/util.c
        modified:   tests/help-version

The files I ended up reverting were NEWS, README, TODO, doc/diagmeet.note,
ms/config.bat, ms/config.site, po/en.po, src/diff.h, src/system.h, and
tests/help-version. To verify that all changes were reverted, I ran git status
again to ensure that only .c files remained modified.

        modified:   src/analyze.c
        modified:   src/cmp.c
        modified:   src/context.c
        modified:   src/diff.c
        modified:   src/diff3.c
        modified:   src/dir.c
        modified:   src/ifdef.c
        modified:   src/io.c
        modified:   src/sdiff.c
        modified:   src/side.c
        modified:   src/util.c
	
To undo changes to .c files, I used vc-diff and diff-apply-hunk to every .c file.
The changes I reverted were all modifications aside from character string constants,
ie. changes to hard-coded C-strings. I did not modify any comments or other changes
to source code.

Files containing changes to character string constants:
src/cmp.c, src/diff.c, src/diff3.c, src/dir.c, src/sdiff.c, src/util.c

10. I used the find command to find all the .rej files, and inspected them one by one
for potential changes that needed to be included.
    find src/*.rej

Output:
diff3.c.rej
diff.c.rej

For diff3.c, there was only one rejected hunk, which I manually changed with emacs.
For diff.c, there were three rejected hunks, all of which required me to manually
remove every offending ` with '.

11. I first moved the three git output files I had previously created outside
of the git directory. I then used the git clean command to get rid of all untracked
files.
    mv quote-patch.txt git-log.txt git-tags.txt ../
    git clean -f

12. I ran git status to confirm that only 6 .c files were modified. I then used git
diff to create a patch file.
     git status
     git diff > quote-3.0-patch.txt
     cat quote-3.0-patch.txt | wc -l

Output (git status):
	modified:   src/cmp.c
        modified:   src/context.c
        modified:   src/diff.c
        modified:   src/diff3.c
        modified:   src/dir.c
        modified:   src/sdiff.c
        modified:   src/util.c

Output (wc - l):
348

13. I read the README-hacking and followed its instructions to build diffutils.
	./bootstrap
	wget https://web.cs.ucla.edu/classes/fall19/cs35L/assign/diffutils-gets.diff
	patch -p1 < diffutils-gets.diff
	File to patch: lib/stdio.in.h
	./configure
	make
	make check

The make check command resulted in some errors, so I manually verified that the changes
I had made were indeed present with the prescribed commands.
    diff . -
    diff --help

Output:
(diff . -)
diff: cannot compare '-' to a directory

(diff --help)
Usage: diff [OPTION]... FILES
Compare FILES line by line.

Mandatory arguments to long options are mandatory for short options too.
      --normal                  output a normal diff (the default)
  -q, --brief                   report only when files differ
  -s, --report-identical-files  report when two files are the same
  -c, -C NUM, --context[=NUM]   output NUM (default 3) lines of copied context
  -u, -U NUM, --unified[=NUM]   output NUM (default 3) lines of unified context
  -e, --ed                      output an ed script
  -n, --rcs                     output an RCS format diff
  -y, --side-by-side            output in two columns
  -W, --width=NUM               output at most NUM (default 130) print columns
      --left-column             output only the left column of common lines
      --suppress-common-lines   do not output common lines

  -p, --show-c-function         show which C function each change is in
  -F, --show-function-line=RE   show the most recent line matching RE
      --label LABEL             use LABEL instead of file name
                                  (can be repeated)

  -t, --expand-tabs             expand tabs to spaces in output
  -T, --initial-tab             make tabs line up by prepending a tab
      --tabsize=NUM             tab stops every NUM (default 8) print columns
      --suppress-blank-empty    suppress space or tab before empty output lines
  -l, --paginate                pass output through 'pr' to paginate it

  -r, --recursive                 recursively compare any subdirectories found
      --no-dereference            don't follow symbolic links
  -N, --new-file                  treat absent files as empty
      --unidirectional-new-file   treat absent first files as empty
      --ignore-file-name-case     ignore case when comparing file names
      --no-ignore-file-name-case  consider case when comparing file names
  -x, --exclude=PAT               exclude files that match PAT
  -X, --exclude-from=FILE         exclude files that match any pattern in FILE
  -S, --starting-file=FILE        start with FILE when comparing directories
      --from-file=FILE1           compare FILE1 to all operands;
                                    FILE1 can be a directory
      --to-file=FILE2             compare all operands to FILE2;
                                    FILE2 can be a directory

  -i, --ignore-case               ignore case differences in file contents
  -E, --ignore-tab-expansion      ignore changes due to tab expansion
  -Z, --ignore-trailing-space     ignore white space at line end
  -b, --ignore-space-change       ignore changes in the amount of white space
  -w, --ignore-all-space          ignore all white space
  -B, --ignore-blank-lines        ignore changes where lines are all blank
  -I, --ignore-matching-lines=RE  ignore changes where all lines match RE

  -a, --text                      treat all files as text
      --strip-trailing-cr         strip trailing carriage return on input

  -D, --ifdef=NAME                output merged file with '#ifdef NAME' diffs
      --GTYPE-group-format=GFMT   format GTYPE input groups with GFMT
      --line-format=LFMT          format all input lines with LFMT
      --LTYPE-line-format=LFMT    format LTYPE input lines with LFMT
    These format options provide fine-grained control over the output
      of diff, generalizing -D/--ifdef.
    LTYPE is 'old', 'new', or 'unchanged'.  GTYPE is LTYPE or 'changed'.
    GFMT (only) may contain:
      %<  lines from FILE1
      %>  lines from FILE2
      %=  lines common to FILE1 and FILE2
      %[-][WIDTH][.[PREC]]{doxX}LETTER  printf-style spec for LETTER
        LETTERs are as follows for new group, lower case for old group:
          F  first line number
          L  last line number
          N  number of lines = L-F+1
          E  F-1
          M  L+1
      %(A=B?T:E)  if A equals B then T else E
    LFMT (only) may contain:
      %L  contents of line
      %l  contents of line, excluding any trailing newline
      %[-][WIDTH][.[PREC]]{doxX}n  printf-style spec for input line number
    Both GFMT and LFMT may contain:
      %%  %
      %c'C'  the single character C
      %c'\OOO'  the character with octal code OOO
      C    the character C (other characters represent themselves)

  -d, --minimal            try hard to find a smaller set of changes
      --horizon-lines=NUM  keep NUM lines of the common prefix and suffix
      --speed-large-files  assume large files and many scattered small changes

      --help               display this help and exit
  -v, --version            output version information and exit

FILES are 'FILE1 FILE2' or 'DIR1 DIR2' or 'DIR FILE...' or 'FILE... DIR'.
If --from-file or --to-file is given, there are no restrictions on FILE(s).
If a FILE is '-', read standard input.
Exit status is 0 if inputs are the same, 1 if different, 2 if trouble.

Report bugs to: bug-diffutils@gnu.org
GNU diffutils home page: <http://www.gnu.org/software/diffutils/>
General help using GNU software: <http://www.gnu.org/gethelp/>

14. I performed a sanity check by comparing the source code of the diffutils I had
just built to the source code of diffutils-3.0 with the following commands:
     mkdir diffutils-3.0-patch
     cp -r diffutils/src/*.c diffutils-3.0-patch/
     mkdir diffutils-3.0
     (had separate clone of diffutils before build)
     cd ~/Desktop/CS35L/Labs/7/diffutils
     git checkout v3.0
     cp -r src/*.c ~/Desktop/CS35L/test/diffutils-3.0/
     cd ~/Desktop/CS35L/test
     diffutils/src/diff -pru diffutils-3.0 diffutils-3.0-patch > quote-3.0-test.txt

15. I then compared quote-3.0-test.txt and quote-3.0-patch.txt using the diff command.
From inspecting the lengthy output, I found that the only changes were the prescribed
changes from ` to '. I chalked these up as innocuous differences.
