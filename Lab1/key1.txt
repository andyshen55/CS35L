1.1
1. emacs exer1.html
2. C-s H T Ret M-f
3. C-s s c a Ret M-b
4. C-s s e l Ret M-b
5. C-s a r r o w Ret M-b
6. C-e
7. C-a
8. Yes, commands would save keystrokes.
9. No, I did not move the cursor using arrow keys. 

1.2
1. emacs exer2.html
2. M-g g 1 8 Ret M-z >
3. C-s D E Ret C-a C-k
4. C-s < ! Ret M-a M-k M-k 
5. C-s < ! Ret C-r Ret M-z >
   C-s < ! Ret M-a M-k M-k M-k
   C-s < ! Ret C-a C-k

1.3
1. emacs exer3.html
2. M-% A s s i g n m e n t SP 1 Ret A s s i g n m e n t SP 4 2 Ret y y Ret
3. M-< M-% U T F - 8 Ret U S - A S C I I Ret y Ret
4. M-< C-M-s [ ^ [ : a s c i i : ] ] Ret C-a M-z >
5. C-s < / o Ret C-e C-o

1.4
1. cat exer2.html exer2.diff > exer4.html
2. emacs exer4.html
3. M-> C-r < C-SP C-e M-w C-r < / h t C-r C-n C-y
4. M-> C-r < ! C-r C-SP M-e C-n C-n M-w C-r n o t h C-r C-n C-y
   M-> C-r < ! C-r C-r C-SP C-s > M-w C-r n o t h C-r M-f C-y
   M-> C-r < ! C-r C-r C-r C-SP M-e C-n M-w C-r S u b C-r C-r C-n C-n C-y
   M-> C-r D C-a C-f C-SP C-e M-w C-r L e a C-r C-n C-n C-y
   M-> C-r U N C-a C-f C-SP C-e M-w C-r L a C-r C-n C-n C-y
5. C-s @ @ C-a C-p C-p C-SP M-> C-w
6. C-_
7. C-SP C-r 2 . C-a C-p M-x c o m m e n t - r e g i o n Ret
8. M-< M-x c o u n t - m a t c h e s Ret < o l >
   7 occurences found
   M-% < o l > Ret < o L > Ret !
   
1.5
1. emacs
   M-x m a k e - d i r e c t o r y Ret j u n k Ret
2. C-x C-f j u n k / h e l l o . c Ret
   (copied hello.c source code)
3. M-x c o m p i l e Ret C-u 0 C-k g c c SP j u Tab Tab Ret
4. M-! . / a Tab Ret C-x b S h Tab Ret C-SP C-a M-x a p p e n d - t o - b u f f e r Ret h e l l o - o u t Ret
5. C-x C-f k e y 1 . t x t Ret
   M-x i n s e r t - b u f f e r Ret h e l l o - o u t Ret
   EOF on input

1.6
1. emacs
   C-x b s c Tab Ret
2. ( r a n d o m SP " 7 0 5 - 1 7 2 - 1 4 4 " ) C-j
   My output: -1201139683212274256
3. ( s e t q SP x SP ( r a n d o m ) ) C-j
   ( s e t q SP y SP ( r a n d o m ) ) C-j
4. ( * SP x SP y ) C-j
   The result I got was incorrect.
   x: -281099375740028067
   y: 373966099054933102
   x * y: 405232499007481334
   I suspect the error was due to an overflow.
5. M-: ( * SP x SP y ) Ret
   The output was the same, except that it was in displayed in the minibuffer, along with two other values:
   (#o26375314762262162766, #x59faccf92c8e5f6)

6. No, the two numbers are not truly random, as a deterministic computer is not capable of generating true random numbers. Emacs uses seed values initialized at startup to generate pseudo-random numbers, along with other deterministic factors such as time, memory etc.

7. Given the 64 bit architecture of the SEASNet servers, the output range for emacs' native random function is [-2^61, 2^61 -1], ie. [int_min, int_max]. Assuming both x,y are truly random, the probability that the product is mathematically incorrect = P(!(x >= sqrt(int_max) && y >= sqrt(int_max))). This is assuming that the problem is essentially mirrored on the negative side, as int_min and int_max will vary at most by one. From inspection, we can see that the probability that x and y are both within the range [0, sqrt(int_max)] is miniscule. For this reason, I would argue that the probability that the two-variable product (xy) is mathematically incorrect is essentially 1. 
